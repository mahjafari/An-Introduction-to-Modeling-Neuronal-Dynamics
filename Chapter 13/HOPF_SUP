import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# Parameters
t = 10
delta_t = 2**(-10)  # Time step
N = int(t / delta_t)  # Number of time steps
I_values_1 = [-1, 0, 1]
I_values_2 = [-0.2, 0, 0.2, 0.4]

# Time vector
t_values = np.linspace(0, t, N+1)
r = np.linspace(0, 1.2, N+1)

# Function defining the system of ODEs
def drdt_1(r, I):
  return (I*r - r**3)

def drdt_2(r, I):
  return (I*r + r**3)

def drdt_3(r, I):
  return (I*r + r**3 - r**5)

# Plot results
plt.figure(figsize=(5, 10))
for I in I_values_1:
  plt.subplot(3,1,1)
  plt.plot(r, drdt_1(r, I), label=f'I = {I}')
  plt.xlabel('$I$ μA ⁄ cm^2 ')
  plt.ylabel('$f$')
  plt.axis([0, 1.2, -3, 1])
  plt.legend()

  plt.subplot(3,1,2)
  plt.plot(r, drdt_2(r, I), label=f'I = {I}')
  plt.xlabel('$I$ μA ⁄ cm^2 ')
  plt.ylabel('$f$')
  plt.axis([0, 1.2, -3, 1])
  plt.legend()

for I in I_values_2:
  plt.subplot(3,1,3)
  plt.plot(r, drdt_3(r, I), label=f'I = {I}')
  plt.xlabel('$I$ μA ⁄ cm^2 ')
  plt.ylabel('$f$')
  plt.axis([0, 1.2, -0.5, 0.5])
  plt.legend()

plt.tight_layout()
plt.show()
