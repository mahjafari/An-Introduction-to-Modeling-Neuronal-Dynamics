import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from scipy.optimize import fsolve

# Parameters
t = 10
delta_t = 2**(-7)  # Time step
N = int(t / delta_t)  # Number of time steps
I_values = [-0.5, -1/8, 0.1]

# Time vector
t_values = np.linspace(0, t, N+1)

# Function defining the system of ODEs
def ODE_3(x, t, I):
  r, a = x
  drdt = I * r + r**3 - r**5
  dadt = 1.
  return [drdt, dadt]

ODE_root_3 = lambda r, I: I * r + r**3 - r**5

# Coordinate transformation
def x_transform(r, a):
    return r * np.cos(a)

def y_transform(r, a):
    return r * np.sin(a)

# Function to add arrows
def add_arrows(ax, x_vals, y_vals, n_arrows=10, color='black'):
    """ Adds arrows to a trajectory to indicate direction. """
    arrow_indices = np.linspace(0, len(x_vals)-2, n_arrows, dtype=int)
    for i in arrow_indices:
        ax.annotate("", xy=(x_vals[i+1], y_vals[i+1]), xytext=(x_vals[i], y_vals[i]), arrowprops=dict(arrowstyle="->", color=color, lw=1.5))

# Create figure
fig, axes = plt.subplots(1, 3, figsize=(10, 4))
fig.suptitle("Comparison of ODE Solutions for Different I values and Initial Conditions", fontsize=14)

for idx, I in enumerate(I_values):
    # Find fixed points
    r_root_3 = fsolve(ODE_root_3, [-1., -0.25, 0., 1.], args=(I,))
    r_extra = max(r_root_3) + 0.2  # A value greater than the largest root

    print(f'I = {I}, r_root_3 = {r_root_3}, extra_r = {r_extra}')

    # Solve and plot ODE_3 for different r0 values
    r0_values = [0.1 ] + [0.5] + list(r_root_3) + [r_extra]  # 0.5, equilibrium points, and an extra r0 > max root
    for r0 in r0_values:
        x0 = [r0, 0.0]  # Initial r and a
        sol_3 = odeint(ODE_3, x0, t_values, args=(I,))
        r_3, a_3 = sol_3[:, 0], sol_3[:, 1]

        axes[idx].plot(x_transform(r_3, a_3), y_transform(r_3, a_3))
        add_arrows(axes[idx], x_transform(r_3, a_3), y_transform(r_3, a_3), color='blue')

    # Scatter equilibrium points and (0.1, 0)
    axes[idx].scatter(x_transform(r_root_3, np.zeros_like(r_root_3)), y_transform(r_root_3, np.zeros_like(r_root_3)), color='black', zorder=5)
    #axes[idx].scatter(x_transform([0.1], [0.0]), y_transform([0.1], [0.0]), color='red', marker='o', s=50, zorder=5)

    axes[idx].set_title(f'ODE 2, I = {I}')
    axes[idx].set_xlabel('$x$')
    axes[idx].set_ylabel('$y$')
    axes[idx].axis('equal')

# Adjust layout for better spacing
plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()
