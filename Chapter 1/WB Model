# Solving WB using Runge-Kutta 4th order Numerical Method

import numpy as np

# Hodgkin-Huxley ODEs:
# dv/dt = (1/C)*(I-g_Na*m_inf**3*h*(v-E_Na)-g_K*n**4*(v-E_K)-gL*(v-E_L))
# dn/dt = a_n*(1-n)-b_n*n
# dh/dt = a_h*(1-h)-b_h*h

# initialize:
t = 100
E_Na = 55
E_K = -90
E_L = -65
g_Na = 35
g_K = 9
g_L = 0.1
I_WB = 0.75
C = 1
delta_t = 2**(-7)

N = int(t/delta_t)

v_WB = np.zeros(N+1)
n_WB = np.zeros(N+1)
h_WB = np.zeros(N+1)
t_value = np.linspace(0, t, N+1)

# Define Alpha:
def a_m(v):
  return ((v+35)/10) / (1 - np.exp(-(v+35)/10))

def a_n(v):
  return (0.05 * (v+34)) / (1 - np.exp(-(v+34)/10))

def a_h(v):
  return 0.35 * np.exp(-(v+58)/20)


# Define Beta:
def b_m(v):
  return 4 * np.exp(-(v+60)/18)

def b_n(v):
  return 0.625 * np.exp(-(v+44)/80)

def b_h(v):
  return 5 / (1 + np.exp(-(v+28)/10))


# Define Lmiting Functions:
def m_inf_WB(v):
      return a_m(v) / (a_m(v) + b_m(v))

def tau_m_WB(v):
  return 1 / (a_m(v) + b_m(v))

def n_inf_WB(v):
  return a_n(v) / (a_n(v) + b_n(v))

def tau_n_WB(v):
  return 1 / (a_n(v) + b_n(v))

def h_inf_WB(v):
  return a_h(v) / (a_h(v) + b_h(v))

def tau_h_WB(v):
  return 1 / (a_h(v) + b_h(v))


# Define Functions:
def f(t, v, n, h):
  return (1/C)*(I_WB-g_Na*(m_inf_WB(v)**3)*h*(v-E_Na)-g_K*(n**4)*(v-E_K)-g_L*(v-E_L))


def f_n(t, v, n):
  return a_n(v)*(1-n)-b_n(v)*n

def f_h(t, v, h):
  return a_h(v)*(1-h)-b_h(v)*h

def F(t, v, n, h):
  K_1 = []
  K_1.append(f(t, v, n, h))
  K_1.append(f_n(t, v, n))
  K_1.append(f_h(t, v, h))
  return np.array(K_1)


# Runge-Kutta-4 method:
def runge_kutta(delta_t, t, v, n, h):
  vnh = []
  K_1 = delta_t * F(t, v, n, h)
  K_2 = delta_t * F(t + 0.5 * delta_t, v + 0.5 * K_1[0], n + 0.5 * K_1[1], h + 0.5 * K_1[2])
  K_3 = delta_t * F(t + 0.5 * delta_t, v + 0.5 * K_2[0], n + 0.5 * K_2[1], h + 0.5 * K_2[2])
  K_4 = delta_t * F(t + delta_t, v + K_3[0], n + K_3[1], h + K_3[2])
  vnh.append(v + (1/6) * (K_1[0] + 2*K_2[0] + 2*K_3[0] + K_4[0]))
  vnh.append(n + (1/6) * (K_1[1] + 2*K_2[1] + 2*K_3[1] + K_4[1]))
  vnh.append(h + (1/6) * (K_1[2] + 2*K_2[2] + 2*K_3[2] + K_4[2]))
  return vnh


v_WB[0] = -63
n_WB[0] = a_n(v_WB[0]) / (a_n(v_WB[0]) + b_n(v_WB[0]))
h_WB[0] = a_h(v_WB[0]) / (a_h(v_WB[0]) + b_h(v_WB[0]))

for i in range(N):
  vnh = runge_kutta(delta_t, t_value[i], v_WB[i], n_WB[i], h_WB[i])
  v_WB[i+1] = vnh[0]
  n_WB[i+1] = vnh[1]
  h_WB[i+1] = vnh[2]

# Plot:
import matplotlib.pyplot as plt

# Plot v, m, n, h:
plt.figure(figsize=(15, 5))

# Plot v:
plt.subplot(2, 2, 1)
plt.plot(t_value, v_WB, 'black')
plt.xlabel('t [ms]')
plt.ylabel('v [mv]')
plt.ylim(-100, 50)
plt.xlim(0, 100)
plt.title('Voltage_WB (v)')

# Plot m, n, h:
plt.subplot(2, 2, 2)
plt.plot(t_value, m_inf_WB(v_WB), 'b', label='P_m_inf')
plt.plot(t_value, n_WB, 'g', label='P_n')
plt.plot(t_value, h_WB, 'm', label='P_h')
plt.xlabel('t [ms]')
plt.ylabel('Probability')
plt.title('Gating Variables_WB')
plt.legend()

plt.tight_layout()
plt.show()
