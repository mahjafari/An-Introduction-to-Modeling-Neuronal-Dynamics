import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# Constants and parameters
v_thr_inf = np.inf
v_res_inf = -np.inf
t = 150
delta_t = 2**(-7)
tau_m = 2
I = 0.15

N = int(t / delta_t)
v_inf = np.zeros(N+1)
t_values = np.linspace(0, t, N+1)
v_inf[0] = 0
v[0] = 0

# Define the Normalized QIF system of ODEs
v_inf = 0.5 + np.sqrt(tau_m * I - 0.25) * np.tan(((np.sqrt(tau_m * I - 0.25) / tau_m)*t_values + np.arctan((v[0] - 0.5) / np.sqrt(tau_m * I - 0.25))))

# Solve and plot for each tau_m and I combination
for i in range(N):
  if I > 1 / (4*tau_m):
    if v_inf[i] > v_thr_inf:
        v_inf[i] = v_res_inf

# Plotting the results
for i in range(N):
    if v_inf[i] == v_res_inf:
        plt.plot(t_values[i:i+2], v_inf[i:i+2], color='black', linestyle='solid')
    else:
        if 0 < v_inf[i] < 1:
            plt.plot(t_values[i:i+2], v_inf[i:i+2], color='blue', linestyle='solid')
        else:
            plt.plot(t_values[i:i+2], v_inf[i:i+2], color='black', linestyle='dashed')

plt.xlim(min(t_values), max(t_values))
plt.ylim(-1, 2)
plt.xlabel('t [ms]')
plt.ylabel('v [mv]')
plt.title('Voltage Trace of a QIF Neuron')
plt.legend([f'$\\tau_m = {tau_m}$ ms\n$I = {I} Î¼A/cm^2$'])
plt.show()
