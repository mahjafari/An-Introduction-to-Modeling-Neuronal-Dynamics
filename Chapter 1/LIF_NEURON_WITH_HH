import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# Constants and parameters
E_Na = 45
E_K = -82
E_L = -59
g_Na = 120
g_K = 36
g_L = 0.3
C = 1
I = 7.0
I_LIF = 1.65
v_thr = -54
v_res = -82
t = 100
delta_t = 2**(-7)

N = int(t / delta_t)

v_LIF = np.zeros(N+1)
I_Na = np.zeros(N+1)
I_K = np.zeros(N+1)
I_L = np.zeros(N+1)
tau_m_HH = np.zeros(N+1)
t_value = np.linspace(0, t, N+1)

v_LIF[0] = v_res

# Define Alpha functions
def a_m(v):
  return ((v + 45) / 10) / (1 - np.exp(-(v + 45) / 10))

def a_n(v):
  return ((v + 60) / 100) / (1 - np.exp(-(v + 60) / 10))

def a_h(v):
  return 0.07 * np.exp(-(v + 70) / 20)

# Define Beta functions
def b_m(v):
  return 4 * np.exp(-(v + 70) / 18)

def b_n(v):
  return (1 / 8) * np.exp(-(v + 70) / 80)

def b_h(v):
  return 1 / (1 + np.exp(-(v + 40) / 10))

# Define limiting functions
def m_inf(v):
  return a_m(v) / (a_m(v) + b_m(v))

def tau_m(v):
  return 1 / (a_m(v) + b_m(v))

def n_inf(v):
  return a_n(v) / (a_n(v) + b_n(v))

def tau_n(v):
  return 1 / (a_n(v) + b_n(v))

def h_inf(v):
  return a_h(v) / (a_h(v) + b_h(v))

def tau_h(v):
  return 1 / (a_h(v) + b_h(v))

# Define the Hodgkin-Huxley system of ODEs
def spike_HH(x, t):
  v, m, n, h = x
  i_Na = g_Na * m**3 * h * (E_Na - v)
  i_K = g_K * n**4 * (E_K - v)
  i_L = g_L * (E_L - v)
  dvdt = (i_Na + i_K + i_L + I) / C
  dmdt = (m_inf(v) - m) / tau_m(v)
  dndt = (n_inf(v) - n) / tau_n(v)
  dhdt = (h_inf(v) - h) / tau_h(v)
  return [dvdt, dmdt, dndt, dhdt]

# Initial conditions for Hodgkin-Huxley model
v0 = -20
m0 = m_inf(v0)
n0 = n_inf(v0)
h0 = h_inf(v0)
x0 = [v0, m0, n0, h0]

# Solve the Hodgkin-Huxley ODE
sol_HH = odeint(spike_HH, x0, t_value)
v_HH = sol_HH[:, 0]
m = sol_HH[:, 1]
n = sol_HH[:, 2]
h = sol_HH[:, 3]

# Implement the reset mechanism for the LIF model
for i in range(N):
  v_LIF[i+1] = v_LIF[i] + delta_t * I_LIF / C
  if v_LIF[i+1] > v_thr:
      v_LIF[i+1] = v_res

# Define currents for the HH model
I_Na = g_Na * m**3 * h * (E_Na - v_HH)
I_K = g_K * n**4 * (E_K - v_HH)
I_L = g_L * (E_L - v_HH)

# Define tau_m for the HH model
tau_m_HH = C / (g_Na * m**3 * h + g_K * n**4 + g_L)

# Plot
plt.figure(figsize=(12, 6))

# Plot v for both models
plt.subplot(2, 2, 1)
plt.plot(t_value, v_HH, 'k', label='HH Model, I = {} μA/cm^2'.format(I))
plt.plot(t_value, v_LIF, '--', label='LIF Model, I = {} μA/cm^2'.format(I_LIF))
plt.xlim(min(t_value), max(t_value))
plt.ylim(-100, 50)
plt.yticks(range(-100, 100, 50))
plt.xlabel('t [ms]')
plt.ylabel('v [mv]')
plt.title('Voltage (v)')
plt.legend()

# Plot Currents for HH model
plt.subplot(2, 2, 2)
plt.plot(t_value, I_Na, 'b', label='I_Na')
plt.plot(t_value, I_K, 'g', label='I_K')
plt.plot(t_value, I_L, 'm', label='I_L')
plt.xlim(min(t_value), max(t_value))
plt.ylim(-20, 20)
plt.xlabel('t [ms]')
plt.ylabel(r'I [μA/cm^2]')
plt.title('Currents')
plt.legend()

# Plot tau_m for HH model
plt.subplot(2, 2, 3)
plt.plot(t_value, tau_m_HH, 'b')
plt.xlim(min(t_value), max(t_value))
plt.ylim(0,1)
plt.xlabel('t [ms]')
plt.ylabel(r'$\tau_m [ms]$')
plt.title('Membrane time constant')

plt.tight_layout()
plt.show()
