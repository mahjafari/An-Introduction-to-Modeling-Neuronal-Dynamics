import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# Two-Dimensional Hodgkin-Huxley ODEs:
# dv/dt = (1/C)*(I-g_Na*m_inf**3*(0.83-n)*(v-E_Na)-g_K*n**4(v-E_K)-gL*(v-E_L))
# dn/dt = a_n*(1-n)-b_n*n

# initialize:
t = 50
E_Na = 45
E_K = -82
E_L = -59
g_Na = 120
g_K = 36
g_L = 0.3
C = 1
I = 10
delta_t = 2**(-10)

N = int(t/delta_t)

v = np.zeros(N+1)
n = np.zeros(N+1)
t_value = np.linspace(0, t, N+1)


# Define Alpha:
def a_m(v):
  return ((v+45)/10) / (1 - np.exp(-(v+45)/10))

def a_n(v):
  return ((v+60)/100) / (1 - np.exp(-(v+60)/10))


# Define Beta:
def b_m(v):
  return 4 * np.exp(-(v+70)/18)

def b_n(v):
  return (1/8) * np.exp(-(v+70)/80)

# Define Limiting Functions:
def m_inf(v):
  return a_m(v) / (a_m(v) + b_m(v))

def tau_m(v):
  return 1 / (a_m(v) + b_m(v))

def n_inf(v):
  return a_n(v) / (a_n(v) + b_n(v))

def tau_n(v):
  return 1 / (a_n(v) + b_n(v))

# Define the Hodgkin-Huxley system of ODEs
def spike_HH(x, t):
  v, m, n = x
  i_Na = g_Na * m_inf(v)**3 * (0.83 - n) * (E_Na - v)
  i_K = g_K * n**4 * (E_K - v)
  i_L = g_L * (E_L - v)
  dvdt = (i_Na + i_K + i_L + I) / C
  dmdt = (m_inf(v) - m) / tau_m(v)
  dndt = (n_inf(v) - n) / tau_n(v)
  return [dvdt, dmdt, dndt]

# Initial conditions for Hodgkin-Huxley model
v0 = -70
m0 = m_inf(v0)
n0 = n_inf(v0)
x0 = [v0, m0, n0]

# Solve the Hodgkin-Huxley ODE
sol_HH = odeint(spike_HH, x0, t_value)
v_HH = sol_HH[:, 0]
n = sol_HH[:, 2]

# Plot:
import matplotlib.pyplot as plt

# Plot v, m, n, h:
plt.figure(figsize=(12, 6))

# Plot v:
plt.subplot(2, 2, 1)
plt.plot(t_value, v_HH, 'r')
plt.xlim(min(t_value), max(t_value))
plt.ylim(-100, 50)
plt.xlabel('t [ms]')
plt.ylabel('v [mv]')
plt.title('Voltage (v)')

# Plot m, n, h:
plt.subplot(2, 2, 2)
plt.plot(t_value, m_inf(v_HH), 'b', label='m')
plt.plot(t_value, n, 'g', label='n')
plt.plot(t_value, 0.83 * np.ones_like(t_value) - n , 'm', label='h')
plt.xlim(min(t_value), max(t_value))
plt.ylim(0, 1)
plt.xlabel('t [ms]')
plt.ylabel('Probability')
plt.title('Gating Variables')
plt.legend()

plt.tight_layout()
plt.show()
