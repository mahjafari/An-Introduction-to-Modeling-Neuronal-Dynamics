import numpy as np
from scipy.integrate import odeint

# initialize:
t = 100
E_Na = 50
E_K = -100
E_L = -67
g_Na = 100
g_K = 80
g_L = 0.1
I = 1
C = 1
tau_d = 2
tau_r_values = [0.2, 1.0]
delta_t = 2**(-10)

N = int(t/delta_t)

v = np.zeros(N+1)
n = np.zeros(N+1)
h = np.zeros(N+1)
s = np.zeros(N+1)
t_value = np.linspace(0, t, N+1)


# Define Alpha:
def a_m(v):
  return (0.32*(v+54)) / (1 - np.exp(-(v+54)/4))

def a_n(v):
  return (0.032*(v+52)) / (1 - np.exp(-(v+52)/5))

def a_h(v):
  return 0.128 * np.exp(-(v+50)/18)


# Define Beta:
def b_m(v):
  return (0.28*(v+27)) / (np.exp((v+27)/5)-1)

def b_n(v):
  return 0.5 * np.exp(-(v+57)/40)

def b_h(v):
  return 4 / (1 + np.exp(-(v+27)/5))

# Define Lmiting Functions:
def m_inf(v):
      return a_m(v) / (a_m(v) + b_m(v))

def tau_m(v):
  return 1 / (a_m(v) + b_m(v))

def n_inf(v):
  return a_n(v) / (a_n(v) + b_n(v))

def tau_n(v):
  return 1 / (a_n(v) + b_n(v))

def h_inf(v):
  return a_h(v) / (a_h(v) + b_h(v))

def tau_h(v):
  return 1 / (a_h(v) + b_h(v))

for tau_r in tau_r_values:

  # Define the Chemical Synapses model ODEs
  def spike(x, t):
    v, n, h, s = x
    i_Na = g_Na * m_inf(v)**3 * h * (E_Na - v)
    i_K = g_K * n**4 * (E_K - v)
    i_L = g_L * (E_L - v)
    dvdt = (i_Na + i_K + i_L + I) / C
    dndt = (n_inf(v) - n) / tau_n(v)
    dhdt = (h_inf(v) - h) / tau_h(v)
    dsdt = ((1 + np.tanh(v/10))*(1 - s))/(2 * tau_r) - (s / tau_d)
    return [dvdt, dndt, dhdt, dsdt]

  # Initial conditions for Chemical Synapses model
  v0 = -70
  n0 = n_inf(v0)
  h0 = h_inf(v0)
  s0 = 0
  x0 = [v0, n0, h0, s0]

  # Solve the Chemical Synapses model ODE
  sol = odeint(spike, x0, t_value)
  v = sol[:, 0]
  n = sol[:, 1]
  h = sol[:, 2]
  s = sol[:, 3]

  # Plot:
  import matplotlib.pyplot as plt

  # Plot v, s:
  plt.figure(figsize=(15, 5))

  # Plot s:
  plt.subplot(3, 2, 1)
  plt.plot(t_value, s, 'black')
  plt.ylim(0, 1)
  plt.xlim(0, 100)
  plt.xlabel('t [ms]')
  plt.ylabel('s')
  plt.title(r'$\tau_r$ = {} ms'.format(tau_r))

  # Plot v:
  plt.subplot(3, 2, 2)
  plt.plot(t_value, v, 'r', label='I = {} μA ⁄ cm^2 '.format(I))
  plt.ylim(-100, 100)
  plt.xlim(0, 100)
  plt.xlabel('t [ms]')
  plt.ylabel('v [mv]')
  plt.title('Voltage trace_RTM (v)')
  plt.legend()

  plt.tight_layout()
  plt.show()
